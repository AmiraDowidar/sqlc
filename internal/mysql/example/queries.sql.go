// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package teachersDB

import (
	"context"
	"database/sql"
)

const getSomeTeachers = `-- name: GetSomeTeachers :one
select school_id, id from teachers where school_lng > ? and school_lat < ?
`

type GetSomeTeachersParams struct {
	SchoolLng sql.NullFloat64 `json:"school_lng"`
	SchoolLat sql.NullFloat64 `json:"school_lat"`
}

type GetSomeTeachersRow struct {
	SchoolID int `json:"school_id"`
	ID       int `json:"id"`
}

func (q *Queries) GetSomeTeachers(ctx context.Context, arg GetSomeTeachersParams) (GetSomeTeachersRow, error) {
	row := q.db.QueryRowContext(ctx, getSomeTeachers, arg.SchoolLng, arg.SchoolLat)
	var i GetSomeTeachersRow
	err := row.Scan(&i.SchoolID, &i.ID)
	return i, err
}

const getStudentsTeacher = `-- name: GetStudentsTeacher :one
select students.first_name, students.last_name, teachers.first_name as teacherFirstName, teachers.id as teacher_id from students left join teachers on teachers.class_id = students.class_id where students.id = ?
`

type GetStudentsTeacherRow struct {
	FirstName        sql.NullString `json:"first_name"`
	LastName         sql.NullString `json:"last_name"`
	TeacherFirstName sql.NullString `json:"teacherFirstName"`
	TeacherID        sql.NullInt64  `json:"teacher_id"`
}

func (q *Queries) GetStudentsTeacher(ctx context.Context, studentID int) (GetStudentsTeacherRow, error) {
	row := q.db.QueryRowContext(ctx, getStudentsTeacher, studentID)
	var i GetStudentsTeacherRow
	err := row.Scan(
		&i.FirstName,
		&i.LastName,
		&i.TeacherFirstName,
		&i.TeacherID,
	)
	return i, err
}

const getTeachersByID = `-- name: GetTeachersByID :one
select id, first_name, last_name, school_id, class_id, school_lat, school_lng, department from teachers where id = ?
`

type GetTeachersByIDRow struct {
	ID         int             `json:"id"`
	FirstName  sql.NullString  `json:"first_name"`
	LastName   sql.NullString  `json:"last_name"`
	SchoolID   int             `json:"school_id"`
	ClassID    int             `json:"class_id"`
	SchoolLat  sql.NullFloat64 `json:"school_lat"`
	SchoolLng  sql.NullFloat64 `json:"school_lng"`
	Department DepartmentType  `json:"department"`
}

func (q *Queries) GetTeachersByID(ctx context.Context, id int) (GetTeachersByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getTeachersByID, id)
	var i GetTeachersByIDRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.SchoolID,
		&i.ClassID,
		&i.SchoolLat,
		&i.SchoolLng,
		&i.Department,
	)
	return i, err
}

const teachersByID = `-- name: TeachersByID :one
select id, school_lat from teachers where id = ? limit 10
`

type TeachersByIDRow struct {
	ID        int             `json:"id"`
	SchoolLat sql.NullFloat64 `json:"school_lat"`
}

func (q *Queries) TeachersByID(ctx context.Context, id int) (TeachersByIDRow, error) {
	row := q.db.QueryRowContext(ctx, teachersByID, id)
	var i TeachersByIDRow
	err := row.Scan(&i.ID, &i.SchoolLat)
	return i, err
}
